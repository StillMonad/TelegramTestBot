from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from telebot import types, TeleBot
from src.tools import tr
import src.tools as tools
from src.objects.moderation import Moderation


@tools.show_call
class Chat:
    def __init__(self, bot: TeleBot, db):
        self.call_data = "–ß–∞—Ç"
        self.commands = ["chat"]
        self.stop_conversation = ['–∑–∞–≤–µ—Ä—à–∏—Ç—å', '–∫–æ–Ω–µ—Ü', '–∑–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥', '–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥', '–ó–∞–∫–æ–Ω—á–∏—Ç—å –¥–∏–∞–ª–æ–≥',
                                  '–∑–∞–∫–æ–Ω—á–∏—Ç—å –¥–∏–∞–ª–æ–≥']
        self.text = "–í—ã –Ω–∞—á–∞–ª–∏ –¥–∏–∞–ª–æ–≥ —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –±–æ—Ç–∞ üôå"

        self.markup_user = self.__make_markup_user_chat(db)
        self.markup_user_end = self.__make_markup_user_chat_end(db)
        self.markup_admin = self.__make_markup_admin_chat(db)
        self.__init_handlers_user(bot, db)
        self.__init_handlers_admin(bot, db)

    def __make_markup_user_chat(self, db):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(types.KeyboardButton('–ó–∞–∫–æ–Ω—á–∏—Ç—å –¥–∏–∞–ª–æ–≥'))
        return markup

    def __make_markup_user_chat_end(self, db):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(types.KeyboardButton('–ü–µ—Ä–µ–π—Ç–∏ –≤ –º–µ–Ω—é'))
        return markup

    def __make_markup_admin_chat(self, db):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(types.KeyboardButton('–ó–∞–∫–æ–Ω—á–∏—Ç—å –¥–∏–∞–ª–æ–≥'))
        return markup

    def __init_handlers_user(self, bot: TeleBot, db):
        @bot.message_handler(func=lambda msg: msg.text in self.stop_conversation)
        def init_chat_message(msg):
            bot.send_message(chat_id=msg.chat.id, text="–£ –≤–∞—Å –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤",
                             reply_markup=self.markup_user)

        @bot.callback_query_handler(func=lambda call: call.data == self.call_data)
        def init_chat_message(call: types.CallbackQuery):
            admin_id = db.get_line_by_data('–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã', '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä')[0]
            admin_chat_id = db.get_line_by_data('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', admin_id)[1]
            bot.send_message(chat_id=admin_chat_id, text=f"{call.from_user.first_name} –Ω–∞—á–∞–ª –¥–∏–∞–ª–æ–≥",
                             disable_notification=False)
            sent_msg = bot.send_message(chat_id=call.message.chat.id, text=self.text,
                                        reply_markup=self.markup_user)
            bot.register_next_step_handler(sent_msg, next_message)

        def next_message(msg: types.Message):
            admin_id = db.get_line_by_data('–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã', '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä')[0]
            admin_chat_id = db.get_line_by_data('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', admin_id)[1]
            if msg.text in self.stop_conversation:
                bot.send_message(chat_id=admin_chat_id, text=f"{msg.from_user.first_name} –∑–∞–∫–æ–Ω—á–∏–ª –¥–∏–∞–ª–æ–≥",
                                 disable_notification=False)
                bot.send_message(chat_id=msg.chat.id, text="–í–æ—Ç –∏ –ø–æ–≥–æ–≤–æ—Ä–∏–ª–∏. üòà", reply_markup=self.markup_user_end)
                return
            try:
                bot.forward_message(admin_chat_id, msg.chat.id, msg.message_id, disable_notification=False)
            except:
                bot.send_message(chat_id=msg.chat.id,
                                 text="–ü–æ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–º –º–Ω–µ –ø—Ä–∏—á–∏–Ω–∞–º —è –Ω–µ –º–æ–≥—É –¥–æ—Å—Ç–∞–≤–∏—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ... \n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–¥–Ω–µ–µ.")
            bot.register_next_step_handler(msg, next_message)

    def __init_handlers_admin(self, bot: TeleBot, db):
        @bot.message_handler(func=lambda msg: msg.reply_to_message is not None)
        def cb(msg: types.Message):
            if not Moderation.is_admin(db, msg.from_user.id):
                return
            try:
                ch_id = msg.reply_to_message.json['forward_from']['id']
                bot.send_message(chat_id=msg.reply_to_message.json['forward_from']['id'], text=msg.text,
                                 disable_notification=False)
            except KeyError:
                bot.send_message(chat_id=msg.chat.id, text="–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å.",
                                 disable_notification=False)
